<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8">
<style>

.bar {
  fill: steelblue;
}

.bar:hover {
  fill: brown;
}

.axis {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

div.tooltip {	
    position: absolute;			
    text-align: center;			
    padding: 2px;				
    font: 12px sans-serif;		
    background: lightsteelblue;	
    border: 0px;		
    border-radius: 8px;			
    pointer-events: none;			
}
</style>
</head><body>
<script type="text/javascript" src="#D3_DIR#/d3/d3.js"></script>
<script>
var div = d3.select("body").append("div")	
    .attr("class", "tooltip")				
    .style("opacity", 0);

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 1280 - margin.left - margin.right,
    height = 1024 - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var color = d3.scale.ordinal()
    .range(["#00FF00", "#FF0000"])
    .domain(["add", "delete"]);

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.csv("commit_by_file.csv", type, function(error, data) {
  if (error) throw error;

  data.forEach(function(d) {
    d.total = parseInt(d["add"]) + parseInt(d["delete"]);
    d.modifications = [{id:d.file, name:"add", y0: 0, y1: d["add"]}, 
                       {id:d.file, name:"delete", y0: d["add"], y1: d.total}];
  });

  data.sort(function(a, b) { return b.total - a.total; });
  data = data.slice(0, 200);

  x.domain(data.map(function(d) { return d.file; }));
  y.domain([0, Math.max.apply(Math, data.map(function (d) {return d.total;}))]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Modifications");


  var modifications = svg.selectAll(".bar")
      .data(data)
       .enter().append("g")
      .attr("class", "g")
      .attr("transform", function(d) { return "translate(" + x(d.file) + ",0)"; });
  
  modifications.selectAll("rect")
      .data(function (d) {return d.modifications;})
      .enter().append("rect")
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d.y1); })
      .attr("height", function(d) { return y(d.y0) - y(d.y1); })
      .attr("id", function(d) { return d.file; })
      .style("fill", function(d){return color(d.name);})
      .on("mouseover", function(d){
           div.style("opacity", .9);	
           div.html("<b>" + d.id + "</b><br/>" + d.name + ": " + (d.y1 - d.y0) )
                .style("left", (d3.event.pageX) + "px")		
                .style("top", (d3.event.pageY - 28) + "px");	
      });
});

function type(d) {
  //d.frequency = +d.frequency;
  return d;
}

</script>
</body></html>
